/**
 * @flow
 */

// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import type { DocumentNode } from 'graphql';
import type { BasePrismaOptions as BPOType } from 'prisma-client-lib';
import { makePrismaClientClass, Model } from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

type NodePromise = Promise<Node>;

export type AtLeastOne<T> = $Shape<T>;

export interface Exists {
  contact(where?: ContactWhereInput): Promise<boolean>;
  history(where?: HistoryWhereInput): Promise<boolean>;
  message(where?: MessageWhereInput): Promise<boolean>;
  snapshot(where?: SnapshotWhereInput): Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface PrismaInterface {
  $exists: Exists;
  $graphql: <T: any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contact: (where: ContactWhereUniqueInput) => ContactNullablePromise;
  contacts: (args?: {
    where?: ContactWhereInput,
    orderBy?: ContactOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<Contact>;
  contactsConnection: (args?: {
    where?: ContactWhereInput,
    orderBy?: ContactOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => ContactConnectionPromise;
  history: (where: HistoryWhereUniqueInput) => HistoryNullablePromise;
  histories: (args?: {
    where?: HistoryWhereInput,
    orderBy?: HistoryOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<History>;
  historiesConnection: (args?: {
    where?: HistoryWhereInput,
    orderBy?: HistoryOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => HistoryConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput,
    orderBy?: MessageOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput,
    orderBy?: MessageOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => MessageConnectionPromise;
  snapshot: (where: SnapshotWhereUniqueInput) => SnapshotNullablePromise;
  snapshots: (args?: {
    where?: SnapshotWhereInput,
    orderBy?: SnapshotOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<Snapshot>;
  snapshotsConnection: (args?: {
    where?: SnapshotWhereInput,
    orderBy?: SnapshotOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => SnapshotConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContact: (data: ContactCreateInput) => ContactPromise;
  updateContact: (args: {
    data: ContactUpdateInput,
    where: ContactWhereUniqueInput
  }) => ContactPromise;
  updateManyContacts: (args: {
    data: ContactUpdateManyMutationInput,
    where?: ContactWhereInput
  }) => BatchPayloadPromise;
  upsertContact: (args: {
    where: ContactWhereUniqueInput,
    create: ContactCreateInput,
    update: ContactUpdateInput
  }) => ContactPromise;
  deleteContact: (where: ContactWhereUniqueInput) => ContactPromise;
  deleteManyContacts: (where?: ContactWhereInput) => BatchPayloadPromise;
  createHistory: (data: HistoryCreateInput) => HistoryPromise;
  updateHistory: (args: {
    data: HistoryUpdateInput,
    where: HistoryWhereUniqueInput
  }) => HistoryPromise;
  upsertHistory: (args: {
    where: HistoryWhereUniqueInput,
    create: HistoryCreateInput,
    update: HistoryUpdateInput
  }) => HistoryPromise;
  deleteHistory: (where: HistoryWhereUniqueInput) => HistoryPromise;
  deleteManyHistories: (where?: HistoryWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput,
    where: MessageWhereUniqueInput
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput,
    where?: MessageWhereInput
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput,
    create: MessageCreateInput,
    update: MessageUpdateInput
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createSnapshot: (data: SnapshotCreateInput) => SnapshotPromise;
  updateSnapshot: (args: {
    data: SnapshotUpdateInput,
    where: SnapshotWhereUniqueInput
  }) => SnapshotPromise;
  upsertSnapshot: (args: {
    where: SnapshotWhereUniqueInput,
    create: SnapshotCreateInput,
    update: SnapshotUpdateInput
  }) => SnapshotPromise;
  deleteSnapshot: (where: SnapshotWhereUniqueInput) => SnapshotPromise;
  deleteManySnapshots: (where?: SnapshotWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contact: (
    where?: ContactSubscriptionWhereInput
  ) => ContactSubscriptionPayloadSubscription;
  history: (
    where?: HistorySubscriptionWhereInput
  ) => HistorySubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  snapshot: (
    where?: SnapshotSubscriptionWhereInput
  ) => SnapshotSubscriptionPayloadSubscription;
}

export type ClientConstructor<T> = (options?: BPOType) => T;

/**
 * Types
 */

export type ContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "cover_ASC"
  | "cover_DESC";

export type HistoryOrderByInput = "id_ASC" | "id_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "text_ASC"
  | "text_DESC";

export type SnapshotOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContactWhereUniqueInput = {
  id?: ID_Input,
  username?: String,
  phone?: String
};

export type ContactWhereInput = {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[],
  id_not_in?: ID_Input[],
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  username?: String,
  username_not?: String,
  username_in?: String[],
  username_not_in?: String[],
  username_lt?: String,
  username_lte?: String,
  username_gt?: String,
  username_gte?: String,
  username_contains?: String,
  username_not_contains?: String,
  username_starts_with?: String,
  username_not_starts_with?: String,
  username_ends_with?: String,
  username_not_ends_with?: String,
  phone?: String,
  phone_not?: String,
  phone_in?: String[],
  phone_not_in?: String[],
  phone_lt?: String,
  phone_lte?: String,
  phone_gt?: String,
  phone_gte?: String,
  phone_contains?: String,
  phone_not_contains?: String,
  phone_starts_with?: String,
  phone_not_starts_with?: String,
  phone_ends_with?: String,
  phone_not_ends_with?: String,
  name?: String,
  name_not?: String,
  name_in?: String[],
  name_not_in?: String[],
  name_lt?: String,
  name_lte?: String,
  name_gt?: String,
  name_gte?: String,
  name_contains?: String,
  name_not_contains?: String,
  name_starts_with?: String,
  name_not_starts_with?: String,
  name_ends_with?: String,
  name_not_ends_with?: String,
  avatar?: String,
  avatar_not?: String,
  avatar_in?: String[],
  avatar_not_in?: String[],
  avatar_lt?: String,
  avatar_lte?: String,
  avatar_gt?: String,
  avatar_gte?: String,
  avatar_contains?: String,
  avatar_not_contains?: String,
  avatar_starts_with?: String,
  avatar_not_starts_with?: String,
  avatar_ends_with?: String,
  avatar_not_ends_with?: String,
  cover?: String,
  cover_not?: String,
  cover_in?: String[],
  cover_not_in?: String[],
  cover_lt?: String,
  cover_lte?: String,
  cover_gt?: String,
  cover_gte?: String,
  cover_contains?: String,
  cover_not_contains?: String,
  cover_starts_with?: String,
  cover_not_starts_with?: String,
  cover_ends_with?: String,
  cover_not_ends_with?: String,
  AND?: ContactWhereInput[],
  OR?: ContactWhereInput[],
  NOT?: ContactWhereInput[]
};

export type HistoryWhereUniqueInput = {
  id?: ID_Input
};

export type HistoryWhereInput = {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[],
  id_not_in?: ID_Input[],
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  start?: MessageWhereInput,
  end?: MessageWhereInput,
  AND?: HistoryWhereInput[],
  OR?: HistoryWhereInput[],
  NOT?: HistoryWhereInput[]
};

export type MessageWhereInput = {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[],
  id_not_in?: ID_Input[],
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  date?: DateTimeInput,
  date_not?: DateTimeInput,
  date_in?: DateTimeInput[],
  date_not_in?: DateTimeInput[],
  date_lt?: DateTimeInput,
  date_lte?: DateTimeInput,
  date_gt?: DateTimeInput,
  date_gte?: DateTimeInput,
  text?: String,
  text_not?: String,
  text_in?: String[],
  text_not_in?: String[],
  text_lt?: String,
  text_lte?: String,
  text_gt?: String,
  text_gte?: String,
  text_contains?: String,
  text_not_contains?: String,
  text_starts_with?: String,
  text_not_starts_with?: String,
  text_ends_with?: String,
  text_not_ends_with?: String,
  from?: ContactWhereInput,
  to?: ContactWhereInput,
  AND?: MessageWhereInput[],
  OR?: MessageWhereInput[],
  NOT?: MessageWhereInput[]
};

export type MessageWhereUniqueInput = {
  id?: ID_Input
};

export type SnapshotWhereUniqueInput = {
  id?: ID_Input
};

export type SnapshotWhereInput = {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[],
  id_not_in?: ID_Input[],
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  conversations_every?: HistoryWhereInput,
  conversations_some?: HistoryWhereInput,
  conversations_none?: HistoryWhereInput,
  AND?: SnapshotWhereInput[],
  OR?: SnapshotWhereInput[],
  NOT?: SnapshotWhereInput[]
};

export type ContactCreateInput = {
  id?: ID_Input,
  username: String,
  phone: String,
  name: String,
  avatar: String,
  cover: String
};

export type ContactUpdateInput = {
  username?: String,
  phone?: String,
  name?: String,
  avatar?: String,
  cover?: String
};

export type ContactUpdateManyMutationInput = {
  username?: String,
  phone?: String,
  name?: String,
  avatar?: String,
  cover?: String
};

export type HistoryCreateInput = {
  id?: ID_Input,
  start: MessageCreateOneInput,
  end: MessageCreateOneInput
};

export type MessageCreateOneInput = {
  create?: MessageCreateInput,
  connect?: MessageWhereUniqueInput
};

export type MessageCreateInput = {
  id?: ID_Input,
  date: DateTimeInput,
  text: String,
  from: ContactCreateOneInput,
  to: ContactCreateOneInput
};

export type ContactCreateOneInput = {
  create?: ContactCreateInput,
  connect?: ContactWhereUniqueInput
};

export type HistoryUpdateInput = {
  start?: MessageUpdateOneRequiredInput,
  end?: MessageUpdateOneRequiredInput
};

export type MessageUpdateOneRequiredInput = {
  create?: MessageCreateInput,
  update?: MessageUpdateDataInput,
  upsert?: MessageUpsertNestedInput,
  connect?: MessageWhereUniqueInput
};

export type MessageUpdateDataInput = {
  date?: DateTimeInput,
  text?: String,
  from?: ContactUpdateOneRequiredInput,
  to?: ContactUpdateOneRequiredInput
};

export type ContactUpdateOneRequiredInput = {
  create?: ContactCreateInput,
  update?: ContactUpdateDataInput,
  upsert?: ContactUpsertNestedInput,
  connect?: ContactWhereUniqueInput
};

export type ContactUpdateDataInput = {
  username?: String,
  phone?: String,
  name?: String,
  avatar?: String,
  cover?: String
};

export type ContactUpsertNestedInput = {
  update: ContactUpdateDataInput,
  create: ContactCreateInput
};

export type MessageUpsertNestedInput = {
  update: MessageUpdateDataInput,
  create: MessageCreateInput
};

export type MessageUpdateInput = {
  date?: DateTimeInput,
  text?: String,
  from?: ContactUpdateOneRequiredInput,
  to?: ContactUpdateOneRequiredInput
};

export type MessageUpdateManyMutationInput = {
  date?: DateTimeInput,
  text?: String
};

export type SnapshotCreateInput = {
  id?: ID_Input,
  conversations?: HistoryCreateManyInput
};

export type HistoryCreateManyInput = {
  create?: HistoryCreateInput[],
  connect?: HistoryWhereUniqueInput[]
};

export type SnapshotUpdateInput = {
  conversations?: HistoryUpdateManyInput
};

export type HistoryUpdateManyInput = {
  create?: HistoryCreateInput[],
  update?: HistoryUpdateWithWhereUniqueNestedInput[],
  upsert?: HistoryUpsertWithWhereUniqueNestedInput[],
  delete?: HistoryWhereUniqueInput[],
  connect?: HistoryWhereUniqueInput[],
  set?: HistoryWhereUniqueInput[],
  disconnect?: HistoryWhereUniqueInput[],
  deleteMany?: HistoryScalarWhereInput[]
};

export type HistoryUpdateWithWhereUniqueNestedInput = {
  where: HistoryWhereUniqueInput,
  data: HistoryUpdateDataInput
};

export type HistoryUpdateDataInput = {
  start?: MessageUpdateOneRequiredInput,
  end?: MessageUpdateOneRequiredInput
};

export type HistoryUpsertWithWhereUniqueNestedInput = {
  where: HistoryWhereUniqueInput,
  update: HistoryUpdateDataInput,
  create: HistoryCreateInput
};

export type HistoryScalarWhereInput = {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[],
  id_not_in?: ID_Input[],
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  AND?: HistoryScalarWhereInput[],
  OR?: HistoryScalarWhereInput[],
  NOT?: HistoryScalarWhereInput[]
};

export type ContactSubscriptionWhereInput = {
  mutation_in?: MutationType[],
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[],
  updatedFields_contains_some?: String[],
  node?: ContactWhereInput,
  AND?: ContactSubscriptionWhereInput[],
  OR?: ContactSubscriptionWhereInput[],
  NOT?: ContactSubscriptionWhereInput[]
};

export type HistorySubscriptionWhereInput = {
  mutation_in?: MutationType[],
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[],
  updatedFields_contains_some?: String[],
  node?: HistoryWhereInput,
  AND?: HistorySubscriptionWhereInput[],
  OR?: HistorySubscriptionWhereInput[],
  NOT?: HistorySubscriptionWhereInput[]
};

export type MessageSubscriptionWhereInput = {
  mutation_in?: MutationType[],
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[],
  updatedFields_contains_some?: String[],
  node?: MessageWhereInput,
  AND?: MessageSubscriptionWhereInput[],
  OR?: MessageSubscriptionWhereInput[],
  NOT?: MessageSubscriptionWhereInput[]
};

export type SnapshotSubscriptionWhereInput = {
  mutation_in?: MutationType[],
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[],
  updatedFields_contains_some?: String[],
  node?: SnapshotWhereInput,
  AND?: SnapshotSubscriptionWhereInput[],
  OR?: SnapshotSubscriptionWhereInput[],
  NOT?: SnapshotSubscriptionWhereInput[]
};

export interface NodeNode {
  id: ID_Output;
}

export interface Contact {
  id: ID_Output;
  username: String;
  phone: String;
  name: String;
  avatar: String;
  cover: String;
}

export interface ContactPromise extends Promise<Contact>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  cover: () => Promise<String>;
}

export interface ContactSubscription
  extends Promise<AsyncIterator<Contact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
}

export interface ContactNullablePromise
  extends Promise<Contact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  cover: () => Promise<String>;
}

export interface ContactConnection {
  pageInfo: PageInfo;
  edges: ContactEdge[];
}

export interface ContactConnectionPromise
  extends Promise<ContactConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<ContactEdge>>() => T;
  aggregate: <T: AggregateContactPromise>() => T;
}

export interface ContactConnectionSubscription
  extends Promise<AsyncIterator<ContactConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<ContactEdgeSubscription>>>() => T;
  aggregate: <T: AggregateContactSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactEdge {
  node: Contact;
  cursor: String;
}

export interface ContactEdgePromise extends Promise<ContactEdge>, Fragmentable {
  node: <T: ContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactEdgeSubscription
  extends Promise<AsyncIterator<ContactEdge>>,
    Fragmentable {
  node: <T: ContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContact {
  count: Int;
}

export interface AggregateContactPromise
  extends Promise<AggregateContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactSubscription
  extends Promise<AsyncIterator<AggregateContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface History {
  id: ID_Output;
}

export interface HistoryPromise extends Promise<History>, Fragmentable {
  id: () => Promise<ID_Output>;
  start: <T: MessagePromise>() => T;
  end: <T: MessagePromise>() => T;
}

export interface HistorySubscription
  extends Promise<AsyncIterator<History>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: <T: MessageSubscription>() => T;
  end: <T: MessageSubscription>() => T;
}

export interface HistoryNullablePromise
  extends Promise<History | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: <T: MessagePromise>() => T;
  end: <T: MessagePromise>() => T;
}

export interface Message {
  id: ID_Output;
  date: DateTimeOutput;
  text: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  from: <T: ContactPromise>() => T;
  to: <T: ContactPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  from: <T: ContactSubscription>() => T;
  to: <T: ContactSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  from: <T: ContactPromise>() => T;
  to: <T: ContactPromise>() => T;
}

export interface HistoryConnection {
  pageInfo: PageInfo;
  edges: HistoryEdge[];
}

export interface HistoryConnectionPromise
  extends Promise<HistoryConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<HistoryEdge>>() => T;
  aggregate: <T: AggregateHistoryPromise>() => T;
}

export interface HistoryConnectionSubscription
  extends Promise<AsyncIterator<HistoryConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<HistoryEdgeSubscription>>>() => T;
  aggregate: <T: AggregateHistorySubscription>() => T;
}

export interface HistoryEdge {
  node: History;
  cursor: String;
}

export interface HistoryEdgePromise extends Promise<HistoryEdge>, Fragmentable {
  node: <T: HistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HistoryEdgeSubscription
  extends Promise<AsyncIterator<HistoryEdge>>,
    Fragmentable {
  node: <T: HistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHistory {
  count: Int;
}

export interface AggregateHistoryPromise
  extends Promise<AggregateHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHistorySubscription
  extends Promise<AsyncIterator<AggregateHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<MessageEdge>>() => T;
  aggregate: <T: AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T: AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T: MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T: MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Snapshot {
  id: ID_Output;
}

export interface SnapshotPromise extends Promise<Snapshot>, Fragmentable {
  id: () => Promise<ID_Output>;
  conversations: <T: FragmentableArray<History>>(args?: {
    where?: HistoryWhereInput,
    orderBy?: HistoryOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
}

export interface SnapshotSubscription
  extends Promise<AsyncIterator<Snapshot>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  conversations: <T: Promise<AsyncIterator<HistorySubscription>>>(args?: {
    where?: HistoryWhereInput,
    orderBy?: HistoryOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
}

export interface SnapshotNullablePromise
  extends Promise<Snapshot | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  conversations: <T: FragmentableArray<History>>(args?: {
    where?: HistoryWhereInput,
    orderBy?: HistoryOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => T;
}

export interface SnapshotConnection {
  pageInfo: PageInfo;
  edges: SnapshotEdge[];
}

export interface SnapshotConnectionPromise
  extends Promise<SnapshotConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<SnapshotEdge>>() => T;
  aggregate: <T: AggregateSnapshotPromise>() => T;
}

export interface SnapshotConnectionSubscription
  extends Promise<AsyncIterator<SnapshotConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<SnapshotEdgeSubscription>>>() => T;
  aggregate: <T: AggregateSnapshotSubscription>() => T;
}

export interface SnapshotEdge {
  node: Snapshot;
  cursor: String;
}

export interface SnapshotEdgePromise
  extends Promise<SnapshotEdge>,
    Fragmentable {
  node: <T: SnapshotPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SnapshotEdgeSubscription
  extends Promise<AsyncIterator<SnapshotEdge>>,
    Fragmentable {
  node: <T: SnapshotSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSnapshot {
  count: Int;
}

export interface AggregateSnapshotPromise
  extends Promise<AggregateSnapshot>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSnapshotSubscription
  extends Promise<AsyncIterator<AggregateSnapshot>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContactSubscriptionPayload {
  mutation: MutationType;
  node: Contact;
  updatedFields: String[];
  previousValues: ContactPreviousValues;
}

export interface ContactSubscriptionPayloadPromise
  extends Promise<ContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: ContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: ContactPreviousValuesPromise>() => T;
}

export interface ContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: ContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: ContactPreviousValuesSubscription>() => T;
}

export interface ContactPreviousValues {
  id: ID_Output;
  username: String;
  phone: String;
  name: String;
  avatar: String;
  cover: String;
}

export interface ContactPreviousValuesPromise
  extends Promise<ContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  cover: () => Promise<String>;
}

export interface ContactPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
}

export interface HistorySubscriptionPayload {
  mutation: MutationType;
  node: History;
  updatedFields: String[];
  previousValues: HistoryPreviousValues;
}

export interface HistorySubscriptionPayloadPromise
  extends Promise<HistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: HistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: HistoryPreviousValuesPromise>() => T;
}

export interface HistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: HistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: HistoryPreviousValuesSubscription>() => T;
}

export interface HistoryPreviousValues {
  id: ID_Output;
}

export interface HistoryPreviousValuesPromise
  extends Promise<HistoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface HistoryPreviousValuesSubscription
  extends Promise<AsyncIterator<HistoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  text: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface SnapshotSubscriptionPayload {
  mutation: MutationType;
  node: Snapshot;
  updatedFields: String[];
  previousValues: SnapshotPreviousValues;
}

export interface SnapshotSubscriptionPayloadPromise
  extends Promise<SnapshotSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: SnapshotPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: SnapshotPreviousValuesPromise>() => T;
}

export interface SnapshotSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SnapshotSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: SnapshotSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: SnapshotPreviousValuesSubscription>() => T;
}

export interface SnapshotPreviousValues {
  id: ID_Output;
}

export interface SnapshotPreviousValuesPromise
  extends Promise<SnapshotPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SnapshotPreviousValuesSubscription
  extends Promise<AsyncIterator<SnapshotPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Contact',
    embedded: false,
  },
  {
    name: 'Message',
    embedded: false,
  },
  {
    name: 'History',
    embedded: false,
  },
  {
    name: 'Snapshot',
    embedded: false,
  },
];

/**
 * Type Defs
 */

export const Prisma: ClientConstructor<PrismaInterface> = makePrismaClientClass(
  { typeDefs, models, endpoint: `${process.env.PRISMA_ENDPOINT || ''}` },
);

export const prisma = new Prisma();
