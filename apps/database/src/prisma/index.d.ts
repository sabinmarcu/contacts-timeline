// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  contact: (where?: ContactWhereInput) => Promise<boolean>;
  conversation: (where?: ConversationWhereInput) => Promise<boolean>;
  history: (where?: HistoryWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  snapshot: (where?: SnapshotWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contact: (where: ContactWhereUniqueInput) => ContactNullablePromise;
  contacts: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contact>;
  contactsConnection: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContactConnectionPromise;
  conversation: (
    where: ConversationWhereUniqueInput
  ) => ConversationNullablePromise;
  conversations: (args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Conversation>;
  conversationsConnection: (args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConversationConnectionPromise;
  history: (where: HistoryWhereUniqueInput) => HistoryNullablePromise;
  histories: (args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<History>;
  historiesConnection: (args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HistoryConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  snapshot: (where: SnapshotWhereUniqueInput) => SnapshotNullablePromise;
  snapshots: (args?: {
    where?: SnapshotWhereInput;
    orderBy?: SnapshotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Snapshot>;
  snapshotsConnection: (args?: {
    where?: SnapshotWhereInput;
    orderBy?: SnapshotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SnapshotConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContact: (data: ContactCreateInput) => ContactPromise;
  updateContact: (args: {
    data: ContactUpdateInput;
    where: ContactWhereUniqueInput;
  }) => ContactPromise;
  updateManyContacts: (args: {
    data: ContactUpdateManyMutationInput;
    where?: ContactWhereInput;
  }) => BatchPayloadPromise;
  upsertContact: (args: {
    where: ContactWhereUniqueInput;
    create: ContactCreateInput;
    update: ContactUpdateInput;
  }) => ContactPromise;
  deleteContact: (where: ContactWhereUniqueInput) => ContactPromise;
  deleteManyContacts: (where?: ContactWhereInput) => BatchPayloadPromise;
  createConversation: (data: ConversationCreateInput) => ConversationPromise;
  updateConversation: (args: {
    data: ConversationUpdateInput;
    where: ConversationWhereUniqueInput;
  }) => ConversationPromise;
  upsertConversation: (args: {
    where: ConversationWhereUniqueInput;
    create: ConversationCreateInput;
    update: ConversationUpdateInput;
  }) => ConversationPromise;
  deleteConversation: (
    where: ConversationWhereUniqueInput
  ) => ConversationPromise;
  deleteManyConversations: (
    where?: ConversationWhereInput
  ) => BatchPayloadPromise;
  createHistory: (data: HistoryCreateInput) => HistoryPromise;
  updateHistory: (args: {
    data: HistoryUpdateInput;
    where: HistoryWhereUniqueInput;
  }) => HistoryPromise;
  upsertHistory: (args: {
    where: HistoryWhereUniqueInput;
    create: HistoryCreateInput;
    update: HistoryUpdateInput;
  }) => HistoryPromise;
  deleteHistory: (where: HistoryWhereUniqueInput) => HistoryPromise;
  deleteManyHistories: (where?: HistoryWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createSnapshot: (data: SnapshotCreateInput) => SnapshotPromise;
  updateSnapshot: (args: {
    data: SnapshotUpdateInput;
    where: SnapshotWhereUniqueInput;
  }) => SnapshotPromise;
  upsertSnapshot: (args: {
    where: SnapshotWhereUniqueInput;
    create: SnapshotCreateInput;
    update: SnapshotUpdateInput;
  }) => SnapshotPromise;
  deleteSnapshot: (where: SnapshotWhereUniqueInput) => SnapshotPromise;
  deleteManySnapshots: (where?: SnapshotWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contact: (
    where?: ContactSubscriptionWhereInput
  ) => ContactSubscriptionPayloadSubscription;
  conversation: (
    where?: ConversationSubscriptionWhereInput
  ) => ConversationSubscriptionPayloadSubscription;
  history: (
    where?: HistorySubscriptionWhereInput
  ) => HistorySubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  snapshot: (
    where?: SnapshotSubscriptionWhereInput
  ) => SnapshotSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "cover_ASC"
  | "cover_DESC"
  | "default_ASC"
  | "default_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "text_ASC"
  | "text_DESC";

export type ConversationOrderByInput = "id_ASC" | "id_DESC";

export type HistoryOrderByInput = "id_ASC" | "id_DESC";

export type SnapshotOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ContactCreateOneInput {
  create?: Maybe<ContactCreateInput>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export type ContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  phone?: Maybe<Int>;
}>;

export type SnapshotWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface ConversationUpsertNestedInput {
  update: ConversationUpdateDataInput;
  create: ConversationCreateInput;
}

export interface ContactUpdateOneRequiredInput {
  create?: Maybe<ContactCreateInput>;
  update?: Maybe<ContactUpdateDataInput>;
  upsert?: Maybe<ContactUpsertNestedInput>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export interface SnapshotWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  conversations_every?: Maybe<HistoryWhereInput>;
  conversations_some?: Maybe<HistoryWhereInput>;
  conversations_none?: Maybe<HistoryWhereInput>;
  AND?: Maybe<SnapshotWhereInput[] | SnapshotWhereInput>;
  OR?: Maybe<SnapshotWhereInput[] | SnapshotWhereInput>;
  NOT?: Maybe<SnapshotWhereInput[] | SnapshotWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface ConversationUpdateDataInput {
  with?: Maybe<ContactUpdateOneRequiredInput>;
  messages?: Maybe<MessageUpdateManyInput>;
}

export interface HistorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HistoryWhereInput>;
  AND?: Maybe<HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput>;
  OR?: Maybe<HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput>;
  NOT?: Maybe<HistorySubscriptionWhereInput[] | HistorySubscriptionWhereInput>;
}

export interface ConversationUpdateOneRequiredInput {
  create?: Maybe<ConversationCreateInput>;
  update?: Maybe<ConversationUpdateDataInput>;
  upsert?: Maybe<ConversationUpsertNestedInput>;
  connect?: Maybe<ConversationWhereUniqueInput>;
}

export interface ConversationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConversationWhereInput>;
  AND?: Maybe<
    ConversationSubscriptionWhereInput[] | ConversationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ConversationSubscriptionWhereInput[] | ConversationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ConversationSubscriptionWhereInput[] | ConversationSubscriptionWhereInput
  >;
}

export interface HistoryUpdateInput {
  conversation?: Maybe<ConversationUpdateOneRequiredInput>;
  start?: Maybe<MessageUpdateOneRequiredInput>;
  end?: Maybe<MessageUpdateOneRequiredInput>;
}

export interface ContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContactWhereInput>;
  AND?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  OR?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  NOT?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
}

export interface MessageCreateOneInput {
  create?: Maybe<MessageCreateInput>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export interface HistoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
  OR?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
  NOT?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
}

export interface HistoryUpdateDataInput {
  conversation?: Maybe<ConversationUpdateOneRequiredInput>;
  start?: Maybe<MessageUpdateOneRequiredInput>;
  end?: Maybe<MessageUpdateOneRequiredInput>;
}

export type HistoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContactCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  phone: Int;
  name: String;
  avatar?: Maybe<String>;
  cover?: Maybe<String>;
  default?: Maybe<Boolean>;
}

export interface HistoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  conversation?: Maybe<ConversationWhereInput>;
  start?: Maybe<MessageWhereInput>;
  end?: Maybe<MessageWhereInput>;
  AND?: Maybe<HistoryWhereInput[] | HistoryWhereInput>;
  OR?: Maybe<HistoryWhereInput[] | HistoryWhereInput>;
  NOT?: Maybe<HistoryWhereInput[] | HistoryWhereInput>;
}

export interface ContactUpdateInput {
  username?: Maybe<String>;
  phone?: Maybe<Int>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  cover?: Maybe<String>;
  default?: Maybe<Boolean>;
}

export interface HistoryCreateManyInput {
  create?: Maybe<HistoryCreateInput[] | HistoryCreateInput>;
  connect?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
}

export interface ContactUpdateManyMutationInput {
  username?: Maybe<String>;
  phone?: Maybe<Int>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  cover?: Maybe<String>;
  default?: Maybe<Boolean>;
}

export interface MessageUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
}

export interface ConversationCreateOneInput {
  create?: Maybe<ConversationCreateInput>;
  connect?: Maybe<ConversationWhereUniqueInput>;
}

export interface MessageUpdateInput {
  date?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
}

export interface HistoryCreateInput {
  id?: Maybe<ID_Input>;
  conversation: ConversationCreateOneInput;
  start: MessageCreateOneInput;
  end: MessageCreateOneInput;
}

export interface MessageUpdateOneRequiredInput {
  create?: Maybe<MessageCreateInput>;
  update?: Maybe<MessageUpdateDataInput>;
  upsert?: Maybe<MessageUpsertNestedInput>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export interface ConversationCreateInput {
  id?: Maybe<ID_Input>;
  with: ContactCreateOneInput;
  messages?: Maybe<MessageCreateManyInput>;
}

export type ConversationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageUpdateManyDataInput {
  date?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
}

export interface ContactWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  cover?: Maybe<String>;
  cover_not?: Maybe<String>;
  cover_in?: Maybe<String[] | String>;
  cover_not_in?: Maybe<String[] | String>;
  cover_lt?: Maybe<String>;
  cover_lte?: Maybe<String>;
  cover_gt?: Maybe<String>;
  cover_gte?: Maybe<String>;
  cover_contains?: Maybe<String>;
  cover_not_contains?: Maybe<String>;
  cover_starts_with?: Maybe<String>;
  cover_not_starts_with?: Maybe<String>;
  cover_ends_with?: Maybe<String>;
  cover_not_ends_with?: Maybe<String>;
  default?: Maybe<Boolean>;
  default_not?: Maybe<Boolean>;
  AND?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  OR?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  NOT?: Maybe<ContactWhereInput[] | ContactWhereInput>;
}

export interface MessageCreateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface HistoryUpsertWithWhereUniqueNestedInput {
  where: HistoryWhereUniqueInput;
  update: HistoryUpdateDataInput;
  create: HistoryCreateInput;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  date: DateTimeInput;
  text: String;
}

export interface HistoryUpdateManyInput {
  create?: Maybe<HistoryCreateInput[] | HistoryCreateInput>;
  update?: Maybe<
    | HistoryUpdateWithWhereUniqueNestedInput[]
    | HistoryUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | HistoryUpsertWithWhereUniqueNestedInput[]
    | HistoryUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  connect?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  set?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  disconnect?: Maybe<HistoryWhereUniqueInput[] | HistoryWhereUniqueInput>;
  deleteMany?: Maybe<HistoryScalarWhereInput[] | HistoryScalarWhereInput>;
}

export interface ConversationUpdateInput {
  with?: Maybe<ContactUpdateOneRequiredInput>;
  messages?: Maybe<MessageUpdateManyInput>;
}

export interface SnapshotCreateInput {
  id?: Maybe<ID_Input>;
  conversations?: Maybe<HistoryCreateManyInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpsertNestedInput {
  update: MessageUpdateDataInput;
  create: MessageCreateInput;
}

export interface ContactUpdateDataInput {
  username?: Maybe<String>;
  phone?: Maybe<Int>;
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  cover?: Maybe<String>;
  default?: Maybe<Boolean>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface ContactUpsertNestedInput {
  update: ContactUpdateDataInput;
  create: ContactCreateInput;
}

export interface HistoryUpdateWithWhereUniqueNestedInput {
  where: HistoryWhereUniqueInput;
  data: HistoryUpdateDataInput;
}

export interface MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateDataInput;
  create: MessageCreateInput;
}

export interface MessageUpdateDataInput {
  date?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
}

export interface MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateDataInput;
}

export interface MessageUpdateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueNestedInput[]
    | MessageUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueNestedInput[]
    | MessageUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface SnapshotUpdateInput {
  conversations?: Maybe<HistoryUpdateManyInput>;
}

export interface ConversationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  with?: Maybe<ContactWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<ConversationWhereInput[] | ConversationWhereInput>;
  OR?: Maybe<ConversationWhereInput[] | ConversationWhereInput>;
  NOT?: Maybe<ConversationWhereInput[] | ConversationWhereInput>;
}

export interface SnapshotSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SnapshotWhereInput>;
  AND?: Maybe<
    SnapshotSubscriptionWhereInput[] | SnapshotSubscriptionWhereInput
  >;
  OR?: Maybe<SnapshotSubscriptionWhereInput[] | SnapshotSubscriptionWhereInput>;
  NOT?: Maybe<
    SnapshotSubscriptionWhereInput[] | SnapshotSubscriptionWhereInput
  >;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface SnapshotPreviousValues {
  id: ID_Output;
}

export interface SnapshotPreviousValuesPromise
  extends Promise<SnapshotPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SnapshotPreviousValuesSubscription
  extends Promise<AsyncIterator<SnapshotPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ConversationEdge {
  node: Conversation;
  cursor: String;
}

export interface ConversationEdgePromise
  extends Promise<ConversationEdge>,
    Fragmentable {
  node: <T = ConversationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConversationEdgeSubscription
  extends Promise<AsyncIterator<ConversationEdge>>,
    Fragmentable {
  node: <T = ConversationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactConnection {
  pageInfo: PageInfo;
  edges: ContactEdge[];
}

export interface ContactConnectionPromise
  extends Promise<ContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContactEdge>>() => T;
  aggregate: <T = AggregateContactPromise>() => T;
}

export interface ContactConnectionSubscription
  extends Promise<AsyncIterator<ContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactSubscription>() => T;
}

export interface ConversationConnection {
  pageInfo: PageInfo;
  edges: ConversationEdge[];
}

export interface ConversationConnectionPromise
  extends Promise<ConversationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConversationEdge>>() => T;
  aggregate: <T = AggregateConversationPromise>() => T;
}

export interface ConversationConnectionSubscription
  extends Promise<AsyncIterator<ConversationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConversationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConversationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactEdge {
  node: Contact;
  cursor: String;
}

export interface ContactEdgePromise extends Promise<ContactEdge>, Fragmentable {
  node: <T = ContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactEdgeSubscription
  extends Promise<AsyncIterator<ContactEdge>>,
    Fragmentable {
  node: <T = ContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContact {
  count: Int;
}

export interface AggregateContactPromise
  extends Promise<AggregateContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactSubscription
  extends Promise<AsyncIterator<AggregateContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateSnapshot {
  count: Int;
}

export interface AggregateSnapshotPromise
  extends Promise<AggregateSnapshot>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSnapshotSubscription
  extends Promise<AsyncIterator<AggregateSnapshot>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SnapshotEdge {
  node: Snapshot;
  cursor: String;
}

export interface SnapshotEdgePromise
  extends Promise<SnapshotEdge>,
    Fragmentable {
  node: <T = SnapshotPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SnapshotEdgeSubscription
  extends Promise<AsyncIterator<SnapshotEdge>>,
    Fragmentable {
  node: <T = SnapshotSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SnapshotSubscriptionPayload {
  mutation: MutationType;
  node: Snapshot;
  updatedFields: String[];
  previousValues: SnapshotPreviousValues;
}

export interface SnapshotSubscriptionPayloadPromise
  extends Promise<SnapshotSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SnapshotPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SnapshotPreviousValuesPromise>() => T;
}

export interface SnapshotSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SnapshotSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SnapshotSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SnapshotPreviousValuesSubscription>() => T;
}

export interface Message {
  id: ID_Output;
  date: DateTimeOutput;
  text: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  text: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface ContactSubscriptionPayload {
  mutation: MutationType;
  node: Contact;
  updatedFields: String[];
  previousValues: ContactPreviousValues;
}

export interface ContactSubscriptionPayloadPromise
  extends Promise<ContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactPreviousValuesPromise>() => T;
}

export interface ContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactPreviousValuesSubscription>() => T;
}

export interface HistoryEdge {
  node: History;
  cursor: String;
}

export interface HistoryEdgePromise extends Promise<HistoryEdge>, Fragmentable {
  node: <T = HistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HistoryEdgeSubscription
  extends Promise<AsyncIterator<HistoryEdge>>,
    Fragmentable {
  node: <T = HistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactPreviousValues {
  id: ID_Output;
  username: String;
  phone: Int;
  name: String;
  avatar?: String;
  cover?: String;
  default: Boolean;
}

export interface ContactPreviousValuesPromise
  extends Promise<ContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  phone: () => Promise<Int>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  cover: () => Promise<String>;
  default: () => Promise<Boolean>;
}

export interface ContactPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  default: () => Promise<AsyncIterator<Boolean>>;
}

export interface Contact {
  id: ID_Output;
  username: String;
  phone: Int;
  name: String;
  avatar?: String;
  cover?: String;
  default: Boolean;
}

export interface ContactPromise extends Promise<Contact>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  phone: () => Promise<Int>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  cover: () => Promise<String>;
  default: () => Promise<Boolean>;
}

export interface ContactSubscription
  extends Promise<AsyncIterator<Contact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  default: () => Promise<AsyncIterator<Boolean>>;
}

export interface ContactNullablePromise
  extends Promise<Contact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  phone: () => Promise<Int>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  cover: () => Promise<String>;
  default: () => Promise<Boolean>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface AggregateConversation {
  count: Int;
}

export interface AggregateConversationPromise
  extends Promise<AggregateConversation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConversationSubscription
  extends Promise<AsyncIterator<AggregateConversation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConversationSubscriptionPayload {
  mutation: MutationType;
  node: Conversation;
  updatedFields: String[];
  previousValues: ConversationPreviousValues;
}

export interface ConversationSubscriptionPayloadPromise
  extends Promise<ConversationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConversationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConversationPreviousValuesPromise>() => T;
}

export interface ConversationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConversationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConversationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConversationPreviousValuesSubscription>() => T;
}

export interface Snapshot {
  id: ID_Output;
}

export interface SnapshotPromise extends Promise<Snapshot>, Fragmentable {
  id: () => Promise<ID_Output>;
  conversations: <T = FragmentableArray<History>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SnapshotSubscription
  extends Promise<AsyncIterator<Snapshot>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  conversations: <T = Promise<AsyncIterator<HistorySubscription>>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SnapshotNullablePromise
  extends Promise<Snapshot | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  conversations: <T = FragmentableArray<History>>(args?: {
    where?: HistoryWhereInput;
    orderBy?: HistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateHistory {
  count: Int;
}

export interface AggregateHistoryPromise
  extends Promise<AggregateHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHistorySubscription
  extends Promise<AsyncIterator<AggregateHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HistoryPreviousValues {
  id: ID_Output;
}

export interface HistoryPreviousValuesPromise
  extends Promise<HistoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface HistoryPreviousValuesSubscription
  extends Promise<AsyncIterator<HistoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface HistorySubscriptionPayload {
  mutation: MutationType;
  node: History;
  updatedFields: String[];
  previousValues: HistoryPreviousValues;
}

export interface HistorySubscriptionPayloadPromise
  extends Promise<HistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HistoryPreviousValuesPromise>() => T;
}

export interface HistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HistoryPreviousValuesSubscription>() => T;
}

export interface Conversation {
  id: ID_Output;
}

export interface ConversationPromise
  extends Promise<Conversation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  with: <T = ContactPromise>() => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConversationSubscription
  extends Promise<AsyncIterator<Conversation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  with: <T = ContactSubscription>() => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConversationNullablePromise
  extends Promise<Conversation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  with: <T = ContactPromise>() => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConversationPreviousValues {
  id: ID_Output;
}

export interface ConversationPreviousValuesPromise
  extends Promise<ConversationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ConversationPreviousValuesSubscription
  extends Promise<AsyncIterator<ConversationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface HistoryConnection {
  pageInfo: PageInfo;
  edges: HistoryEdge[];
}

export interface HistoryConnectionPromise
  extends Promise<HistoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HistoryEdge>>() => T;
  aggregate: <T = AggregateHistoryPromise>() => T;
}

export interface HistoryConnectionSubscription
  extends Promise<AsyncIterator<HistoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HistoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHistorySubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SnapshotConnection {
  pageInfo: PageInfo;
  edges: SnapshotEdge[];
}

export interface SnapshotConnectionPromise
  extends Promise<SnapshotConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SnapshotEdge>>() => T;
  aggregate: <T = AggregateSnapshotPromise>() => T;
}

export interface SnapshotConnectionSubscription
  extends Promise<AsyncIterator<SnapshotConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SnapshotEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSnapshotSubscription>() => T;
}

export interface History {
  id: ID_Output;
}

export interface HistoryPromise extends Promise<History>, Fragmentable {
  id: () => Promise<ID_Output>;
  conversation: <T = ConversationPromise>() => T;
  start: <T = MessagePromise>() => T;
  end: <T = MessagePromise>() => T;
}

export interface HistorySubscription
  extends Promise<AsyncIterator<History>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  conversation: <T = ConversationSubscription>() => T;
  start: <T = MessageSubscription>() => T;
  end: <T = MessageSubscription>() => T;
}

export interface HistoryNullablePromise
  extends Promise<History | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  conversation: <T = ConversationPromise>() => T;
  start: <T = MessagePromise>() => T;
  end: <T = MessagePromise>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Contact",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Conversation",
    embedded: false
  },
  {
    name: "History",
    embedded: false
  },
  {
    name: "Snapshot",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
